using libMBIN.NMS.Toolkit;
using libMBIN.NMS.GameComponents;

namespace libMBIN.NMS.Globals
{
    [NMS(GUID = 0xC6B2C0943622D866)]
    public class GcPlayerGlobals : NMSTemplate
    {
        /* 0x0000 */ public float Unknown0x0;
        /* 0x0004 */ public float Unknown0x4;
        /* 0x0008 */ public float Unknown0x8;
        /* 0x000C */ public float Unknown0xC;
        /* 0x0010 */ public float Unknown0x10;
        /* 0x0014 */ public float Unknown0x14;
        /* 0x0018 */ public float Unknown0x18;
        /* 0x001C */ public bool Unknown0x1C;
        /* 0x001D */ public bool Unknown0x1D;
        /* 0x0020 */ public float Unknown0x20;
        /* 0x0024 */ public float Unknown0x24;
        /* 0x0028 */ public float Unknown0x28;
        /* 0x002C */ public float Unknown0x2C;
        /* 0x0030 */ public float Unknown0x30;
        /* 0x0034 */ public float Unknown0x34;
        /* 0x0038 */ public float Unknown0x38;
        /* 0x003C */ public float Unknown0x3C;
        /* 0x0040 */ public float Unknown0x40;
        [NMS(Size = 0xC, Ignore = true)]
        /* 0x0044 */ public byte[] Padding44;
        /* 0x0050 */ public GcInWorldUIScreenData Unknown0x50;
        /* 0x0080 */ public GcInWorldUIScreenData Unknown0x80;
        /* 0x00B0 */ public float Unknown0xB0;
        [NMS(Size = 0xC, Ignore = true)]
        /* 0x00B4 */ public byte[] PaddingB4;
        /* 0x00C0 */ public GcInWorldUIScreenData Unknown0xC0;
        /* 0x00F0 */ public GcInWorldUIScreenData Unknown0xF0;
        /* 0x0120 */ public GcInWorldUIScreenData Unknown0x120;
        /* 0x0150 */ public GcInWorldUIScreenData Unknown0x150;
        /* 0x0180 */ public GcInWorldUIScreenData Unknown0x180;
        /* 0x01B0 */ public GcInWorldUIScreenData Unknown0x1B0;
        /* 0x01E0 */ public GcInWorldUIScreenData Unknown0x1E0;
        /* 0x0210 */ public GcInWorldUIScreenData Unknown0x210;
        /* 0x0240 */ public GcInWorldUIScreenData Unknown0x240;
        /* 0x0270 */ public GcInWorldUIScreenData Unknown0x270;
        /* 0x02A0 */ public GcInWorldUIScreenData Unknown0x2A0;
        /* 0x02D0 */ public GcInWorldUIScreenData Unknown0x2D0;
        /* 0x300 */ public float Unknown0x300;
        /* 0x304 */ public float Unknown0x304;
        /* 0x308 */ public float Unknown0x308;
        /* 0x30C */ public float Unknown0x30C;
        /* 0x310 */ public float Unknown0x310;
        /* 0x314 */ public Vector2f Unknown0x314;
        /* 0x31C */ public float Unknown0x31C;
        /* 0x320 */ public float Unknown0x320;
        /* 0x324 */ public float Unknown0x324;
        /* 0x328 */ public float Unknown0x328;
        /* 0x32C */ public float Unknown0x32C;
        /* 0x330 */ public float Unknown0x330;
        /* 0x334 */ public float Unknown0x334;
        /* 0x338 */ public float Unknown0x338;
        /* 0x33C */ public float Unknown0x33C;
        /* 0x340 */ public Vector2f Unknown0x340;
        /* 0x348 */ public float Unknown0x348;
        /* 0x34C */ public float Unknown0x34C;
        /* 0x350 */ public float Unknown0x350;
        /* 0x354 */ public float Unknown0x354;
        /* 0x358 */ public float Unknown0x358;
        /* 0x35C */ public float Unknown0x35C;
        /* 0x360 */ public float Unknown0x360;
        /* 0x364 */ public float Unknown0x364;
        /* 0x368 */ public float Unknown0x368;
        /* 0x36C */ public float Unknown0x36C;
        /* 0x370 */ public float Unknown0x370;
        /* 0x374 */ public float Unknown0x374;
        /* 0x378 */ public float Unknown0x378;
        /* 0x37C */ public float Unknown0x37C;
        /* 0x380 */ public float Unknown0x380;
        /* 0x384 */ public float Unknown0x384;
        /* 0x388 */ public float Unknown0x388;
        /* 0x38C */ public float Unknown0x38C;
        /* 0x390 */ public float Unknown0x390;
        /* 0x394 */ public float Unknown0x394;
        /* 0x398 */ public float Unknown0x398;
        /* 0x39C */ public float Unknown0x39C;
        /* 0x3A0 */ public float Unknown0x3A0;
        /* 0x3A4 */ public float Unknown0x3A4;
        /* 0x3A8 */ public float Unknown0x3A8;
        /* 0x3AC */ public float Unknown0x3AC;
        /* 0x3B0 */ public float Unknown0x3B0;
        /* 0x3B4 */ public float Unknown0x3B4;
        /* 0x3B8 */ public float Unknown0x3B8;
        /* 0x3BC */ public float Unknown0x3BC;
        /* 0x3C0 */ public float Unknown0x3C0;
        /* 0x3C4 */ public float Unknown0x3C4;
        /* 0x3C8 */ public float Unknown0x3C8;
        [NMS(Size = 0x4, Ignore = true)]
        /* 0x03CC */ public byte[] Padding3CC;
        /* 0x03D0 */ public GcInWorldUIScreenData Unknown0x3D0;
        /* 0x400 */ public float Unknown0x400;
        /* 0x404 */ public float Unknown0x404;
        /* 0x408 */ public bool Unknown0x408;
        /* 0x40C */ public float Unknown0x40C;
        /* 0x410 */ public bool Unknown0x410;       // This may just be an int with the next 3 bools not existing...
        /* 0x411 */ public bool Unknown0x411;
        /* 0x412 */ public bool Unknown0x412;
        /* 0x413 */ public bool Unknown0x413;
        /* 0x414 */ public bool Unknown0x414;
        /* 0x418 */ public float Unknown0x418;
        /* 0x41C */ public float Unknown0x41C;
        /* 0x420 */ public float Unknown0x420;
        /* 0x424 */ public bool Unknown0x424;
        /* 0x425 */ public bool Unknown0x425;
        /* 0x426 */ public bool Unknown0x426;
        /* 0x428 */ public float Unknown0x428;
        /* 0x42C */ public float Unknown0x42C;
        /* 0x430 */ public int UnknownInt0x430;
        /* 0x434 */ public float Unknown0x434;          // this
        /* 0x438 */ public float Unknown0x438;          // this
        /* 0x43C */ public float Unknown0x43C;          // and this aren't used I don't think
        /* 0x440 */ public float Unknown0x440;
        /* 0x444 */ public float Unknown0x444;
        /* 0x448 */ public float Unknown0x448;
        /* 0x44C */ public float Unknown0x44C;
        /* 0x450 */ public bool Unknown0x450;
        /* 0x454 */ public float Unknown0x454;
        /* 0x458 */ public float Unknown0x458;
        /* 0x45C */ public float Unknown0x45C;
        /* 0x460 */ public float Unknown0x460;
        /* 0x464 */ public float Unknown0x464;
        /* 0x468 */ public float Unknown0x468;
        /* 0x46C */ public float Unknown0x46C;
        /* 0x470 */ public float Unknown0x470;
        /* 0x474 */ public float Unknown0x474;
        /* 0x478 */ public float Unknown0x478;
        /* 0x47C */ public float Unknown0x47C;
        /* 0x480 */ public float GroundWalkForce;
        /* 0x484 */ public float GroundWalkBrake;
        /* 0x488 */ public float GroundWalkBrakeWhileMoving;
        /* 0x48C */ public float GroundWalkSpeed;
        /* 0x490 */ public float GroundWalkSpeed_Unknown;              // Maybe VR value??
        /* 0x494 */ public float GroundRunSpeed;
        /* 0x498 */ public float GroundWalkRecoverySpeedDamper;
        /* 0x49C */ public float Unknown0x49C;
        /* 0x4A0 */ public float Unknown0x4A0;
        /* 0x4A4 */ public float Unknown0x4A4;
        /* 0x4A8 */ public float Unknown0x4A8;
        /* 0x4AC */ public float Unknown0x4AC;
        /* 0x4B0 */ public float Unknown0x4B0;
        /* 0x4B4 */ public float Unknown0x4B4;
        /* 0x4B8 */ public float Unknown0x4B8;
        /* 0x4BC */ public float Unknown0x4BC;
        /* 0x4C0 */ public float Unknown0x4C0;
        /* 0x4C4 */ public float Unknown0x4C4;
        /* 0x4C8 */ public float Unknown0x4C8;
        /* 0x4CC */ public float Unknown0x4CC;
        /* 0x4D0 */ public float Unknown0x4D0;
        /* 0x4D4 */ public float Unknown0x4D4;
        /* 0x4D8 */ public float Unknown0x4D8;
        /* 0x4DC */ public float Unknown0x4DC;
        /* 0x4E0 */ public float Unknown0x4E0;
        /* 0x4E4 */ public float Unknown0x4E4;
        /* 0x4E8 */ public float Unknown0x4E8;
        /* 0x4EC */ public float Unknown0x4EC;
        /* 0x4F0 */ public float Unknown0x4F0;
        /* 0x4F4 */ public bool Unknown0x4F4;
        /* 0x4F8 */ public float Unknown0x4F8;
        /* 0x4FC */ public float Unknown0x4FC;
        /* 0x500 */ public float Unknown0x500;
        /* 0x504 */ public float Unknown0x504;
        /* 0x508 */ public float Unknown0x508;
        /* 0x50C */ public float Unknown0x50C;
        /* 0x510 */ public float Unknown0x510;
        /* 0x514 */ public float Unknown0x514;
        /* 0x518 */ public float Unknown0x518;
        /* 0x51C */ public float Unknown0x51C;
        /* 0x520 */ public Vector2f Unknown0x520;
        /* 0x528 */ public int UnknownInt0x528;
        /* 0x52C */ public int UnknownInt0x52C;
        /* 0x530 */ public float Unknown0x530;      // Looks like a colour?
        /* 0x534 */ public float Unknown0x534;
        /* 0x538 */ public float Unknown0x538;
        /* 0x53C */ public float Unknown0x53C;
        /* 0x540 */ public float Unknown0x540;      // Maybe this too?
        /* 0x544 */ public float Unknown0x544;
        /* 0x548 */ public float Unknown0x548;
        /* 0x54C */ public float Unknown0x54C;
        /* 0x550 */ public GcScanEffectData Unknown0x550;
        /* 0x5A0 */ public GcScanEffectData Unknown0x5A0;
        /* 0x5F0 */ public float Unknown0x5F0;
        /* 0x5F4 */ public float Unknown0x5F4;
        /* 0x5F8 */ public float Unknown0x5F8;
        /* 0x5FC */ public float Unknown0x5FC;
        /* 0x600 */ public float Unknown0x600;
        /* 0x604 */ public float Unknown0x604;
        /* 0x608 */ public float Unknown0x608;
        /* 0x60C */ public bool Unknown0x60C;           // this...
        /* 0x610 */ public float Unknown0x610;
        /* 0x614 */ public float Unknown0x614;
        /* 0x618 */ public float Unknown0x618;
        /* 0x61C */ public float Unknown0x61C;
        /* 0x620 */ public float Unknown0x620;
        /* 0x624 */ public Vector2f Unknown0x624;
        /* 0x62C */ public float Unknown0x62C;
        [NMS(Size = 0x80)]
        /* 0x630 */ public string PlayerMaterial;
        /* 0x6B0 */ public float Unknown0x6B0;
        /* 0x6B4 */ public float Unknown0x6B4;
        /* 0x6B8 */ public float Unknown0x6B8;
        /* 0x6BC */ public float Unknown0x6BC;
        /* 0x6C0 */ public float Unknown0x6C0;
        /* 0x6C4 */ public bool Unknown0x6C4;           // or this may be InteractNearbyRadiusEnabled
        /* 0x6C8 */ public float Unknown0x6C8;
        /* 0x6CC */ public float Unknown0x6CC;
        /* 0x6D0 */ public float Unknown0x6D0;
        /* 0x6D4 */ public float Unknown0x6D4;
        /* 0x6D8 */ public float Unknown0x6D8;
        /* 0x6DC */ public float Unknown0x6DC;
        /* 0x6E0 */ public float Unknown0x6E0;
        /* 0x6E4 */ public float Unknown0x6E4;
        [NMS(Size = 0x10)]
        /* 0x06E8 */ public string DebugSearchGroup;
        [NMS(Size = 0x8, Ignore = true)]
        /* 0x06F8 */ public byte[] Padding6F8;
        /* 0x0700 */ public Colour SearchGroupIconColour;
        /* 0x0710 */ public bool DebugExperience;
        [NMS(Size = 0x80)]
        /* 0x0711 */ public string DefaultShipFilename;
        [NMS(Size = 0x7, Ignore = true)]
        /* 0x0791 */ public byte[] Padding791;
        /* 0x0798 */ public GcSeed DefaultShipSeed;
        /* 0x07A8 */ public bool DebugExperienceRender;
        /* 0x07A9 */ public bool DebugDroneScanPlayer;
        [NMS(Size = 0x6, Ignore = true)]
        /* 0x07AA */ public byte[] Padding7AA;
        /* 0x07B0 */ public Vector4f DebugDroneSpawn;
        /* 0x07C0 */ public Vector4f DebugDroneTarget;
        /* 0x07D0 */ public int DebugNumDrones;
        [NMS(Size = 0xC, Ignore = true)]
        /* 0x07D4 */ public byte[] Padding7D4;
        /* 0x07E0 */ public Vector4f DebugWalkerSpawn;
        /* 0x07F0 */ public Vector4f DebugWalkerTarget;
        /* 0x0800 */ public Vector4f DebugFlybyTarget;
        /* 0x0810 */ public Vector4f DebugFlybyDir;
        /* 0x0820 */ public float DebugFlybyRange;
        [NMS(Size = 0x4, Ignore = true)]
        /* 0x0824 */ public byte[] Padding824;
        /* 0x0828 */ public GcSeed DebugFlybySeed;
        [NMS(Size = 0x10)]
        /* 0x0838 */ public string DebugExperienceCamShake;
        [NMS(Size = 0x8, Ignore = true)]
        /* 0x0848 */ public byte[] Padding848;
        /* 0x0850 */ public GcScanEffectData ArmourHighlightScanEffect;
        /* 0x08A0 */ public float HitReactNoiseAmount;
        /* 0x08A4 */ public float HitReactBlendOutSpeedMin;
        /* 0x08A8 */ public float HitReactBlendOutSpeedMax;
        /* 0x08AC */ public float JetpackUnderwaterDrainRate;
        /* 0x08B0 */ public float JetpackUnderwaterFillRate;
        /* 0x08B4 */ public float UnderwaterMargin;
        /* 0x08B8 */ public float UnderwaterMinDepth;
        /* 0x08BC */ public float UnderwaterSurfaceTension;
        /* 0x08C0 */ public float UnderwaterSurfaceTensionOffset;
        /* 0x08C4 */ public float UnderwaterSurfaceForceFlattenAngleMin;
        /* 0x08C8 */ public float UnderwaterSurfaceForceFlattenAngleRange;
        /* 0x08CC */ public float UnderwaterImpact;
        /* 0x08D0 */ public float UnderwaterMaxSpeed;
        /* 0x08D4 */ public float UnderwaterForce;
        /* 0x08D8 */ public float UnderwaterMaxJetpackSpeed;
        /* 0x08DC */ public float UnderwaterJetpackForce;
        /* 0x08E0 */ public float UnderwaterMaxJetpackEscapeSpeed;
        /* 0x08E4 */ public float UnderwaterJetpackEscapeForce;
        /* 0x08E8 */ public float UnderwaterBrake;
        /* 0x08EC */ public float UnderwaterFloat;
        /* 0x08F0 */ public float UnderwaterFloatForce;
        /* 0x08F4 */ public float UnderwaterFloatRange;
        /* 0x08F8 */ public float UnderwaterFloatFreq;
        /* 0x08FC */ public float RespawnOnPadRadius;
        /* 0x0900 */ public float DeepWaterDepth;
        /* 0x0904 */ public float CockpitEjectTestRadius;
        /* 0x0908 */ public float CockpitEjectTestStartHeightOffset;
        /* 0x090C */ public float CockpitEjectTestEndHeightOffset;
        /* 0x0910 */ public float CockpitEjectFirstPersonOffsetTime;
        /* 0x0914 */ public float CockpitEjectFirstPersonOffset;
        /* 0x0918 */ public float BinocularRangePlanet;
        /* 0x091C */ public float BinocularRangeSpace;
        /* 0x0920 */ public float MinBinocActiveTime;
        /* 0x0924 */ public float Unknown0x924;
        /* 0x0928 */ public int RobotMultiplierWithFriends;
        /* 0x092C */ public float DroneStartLocationRadius;
        /* 0x0930 */ public float ShipSummonLastSafeMargin;
        /* 0x0934 */ public float CreativeModeDeathFadeInTime;
        /* 0x0938 */ public float CreativeModeDeathFadeOutTime;
        /* 0x093C */ public float Unknown0x93C;
        /* 0x0940 */ public bool Unknown0x940;
        /* 0x0944 */ public float Unknown0x944;
        /* 0x0948 */ public float Unknown0x948;
        /* 0x094C */ public float Unknown0x94C;
        /* 0x0950 */ public int NumberOfWarpsRequiredForFreightersToSpawn;
        /* 0x0954 */ public float SpawningDistanceBetweenPlayersAfterWarp;
        /* 0x0958 */ public float SpawningSpaceBattleLookOffset;
        /* 0x095C */ public float SpawningSpaceBattleLookOffsetUp;
        /* 0x0960 */ public bool MultiplayerShareWanted;
        /* 0x0961 */ public bool ReportAllProjectileDamage;
        /* 0x0964 */ public int DefaultHitPoints;
        /* 0x0968 */ public int DefaultHealthPips;
        /* 0x096C */ public int DefaultShipHealthPips;
        /* 0x0970 */ public int MaxHealthPips;
        /* 0x0974 */ public bool UseLargeHealthBar;
        /* 0x0978 */ public float DroneSpawnAccelerator;
        /* 0x097C */ public float TrackArrowStaticTargetOffsetMultiplier;
        /* 0x0980 */ public float WitnessSenseEnhancementTime;
        /* 0x0984 */ public float WitnessSenseEnhancement;
        /* 0x0988 */ public float MultiplayerMinWanteEscalationTime;
        /* 0x098C */ public float HealthRechargeMinTimeSinceDamage;
        /* 0x0990 */ public float HealthPipRechargeRate;
        /* 0x0994 */ public float MinEnergyPercentOnRespawn;
        /* 0x0998 */ public float VehicleRaceResultsHintTime;
        /* 0x099C */ public float OtherPlayerTrackArrowRange;
        /* 0x09A0 */ public float WantedLevelPlayerRange;
        /* 0x09A4 */ public float WantedLevelPlayerRangeSpace;
        /* 0x09A8 */ public float PlayerTransferRange;
        /* 0x09AC */ public float PlayerSpaceTransferRange;
        /* 0x09B0 */ public float DroneScanTimeToForget;
        /* 0x09B4 */ public float GhostbusterStartLength;
        /* 0x09B8 */ public float GhostbusterStart1;
        /* 0x09BC */ public float GhostbusterSpeed1;
        /* 0x09C0 */ public float GhostbusterFreq1;
        /* 0x09C4 */ public float GhostbusterAmp1;
        /* 0x09C8 */ public float GhostbusterStart2;
        /* 0x09CC */ public float GhostbusterSpeed2;
        /* 0x09D0 */ public float GhostbusterFreq2;
        /* 0x09D4 */ public float GhostbusterAmp2;
        /* 0x09D8 */ public float GhostbusterStart3;
        /* 0x09DC */ public float GhostbusterSpeed3;
        /* 0x09E0 */ public float GhostbusterFreq3;
        /* 0x09E4 */ public float GhostbusterAmp3;
        /* 0x09E8 */ public bool WeaponZoomEnabled;
        /* 0x09E9 */ public bool Unknown0x9E9;              // this and the above value may be interchanged
        /* 0x09EC */ public float WeaponZoomFOV;
        /* 0x09F0 */ public float WeaponZoomRecoilMultiplier;
        /* 0x09F4 */ public float WeaponZoomVertRotation;
        /* 0x09F8 */ public float WeaponZoomHorzRotation;
        /* 0x09FC */ public bool FrontShieldEnabled;
        /* 0x0A00 */ public float FrontShieldOffsetOff;
        /* 0x0A04 */ public float FrontShieldOffsetOn;
        /* 0x0A08 */ public float FrontShieldSpeedSlowdown;
        /* 0x0A0C */ public float CombatSpawnMinWantedTime;
        /* 0x0A10 */ public float ExperienceHardPiratesDamagePotentialMin;
        /* 0x0A14 */ public float ExperienceHardPiratesDamagePotentialRange;
        /* 0x0A18 */ public float ExperienceHardPiratesDamageMaxOdds;
        /* 0x0A1C */ public float ExperienceMediumPiratesDamagePotentialMin;
        /* 0x0A20 */ public float ExperienceMediumPiratesDamagePotentialRange;
        /* 0x0A24 */ public float ExperienceMediumPiratesDamageMaxOdds;
        /* 0x0A28 */ public float CommunicatorSpeed;
        /* 0x0A2C */ public float GrenadeBounceDamping;
        /* 0x0A30 */ public float GrenadeBounceMaxSpeed;
        /* 0x0A34 */ public float GrenadeStopExplodeTime;
        /* 0x0A38 */ public float CockpitEjectTestSphereRadius;
        /* 0x0A3C */ public float CockpitEjectTestSphereRange;
        /* 0x0A40 */ public float CockpitEjectSideTestRange;
        /* 0x0A44 */ public float WeaponShotgunSlowdown;
        /* 0x0A48 */ public int   MouseSmoothMode; // should be enum
        /* 0x0A4C */ public Vector2f MouseSpringStrength;
        /* 0x0A54 */ public Vector2f MouseSpringStrengthMinDelta;
        /* 0x0A5C */ public Vector2f MouseSpringStrengthMaxDelta;
        /* 0x0A64 */ public float HardModeEnergyDischargeRateLow;
        /* 0x0A68 */ public float HardModeEnergyDischargeRateMedium;
        /* 0x0A6C */ public float HardModeEnergyDischargeRateHigh;
        /* 0x0A70 */ public float HazardDamageMinTime;
        /* 0x0A74 */ public float EnergyDamageMinTime;
        /* 0x0A78 */ public float EnergyDischargeRateLow;
        /* 0x0A7C */ public float EnergyDischargeRateMedium;
        /* 0x0A80 */ public float EnergyDischargeRateHigh;
        /* 0x0A84 */ public float EnergyDischargeRateFloatingInSpace;
        /* 0x0A88 */ public float EnergyPainRate;
        /* 0x0A8C */ public float SolarRegenFactor;
        /* 0x0A90 */ public Colour DefaultMuzzleColour;
        /* 0x0AA0 */ public Colour TerrainEditorMuzzleColourSubtract;
        /* 0x0AB0 */ public Colour TerrainEditorMuzzleColourAdd;
        /* 0x0AC0 */ public Colour TerrainEditorMuzzleColourFlattening;     // This has no affect. HG has a bug in their code to use this value.
        /* 0x0AD0 */ public Colour TerrainEditorMuzzleColourUndo;
        /* 0x0AE0 */ public Colour DefaultMuzzleLaserColour;
        /* 0x0AF0 */ public float FreeJetpackRange;
        /* 0x0AF4 */ public float FreeJetpackRangeNonTerrain;
        /* 0x0AF8 */ public float JetpackDrainHorizontalFactor;
        /* 0x0AFC */ public float MinTimeAfterMeleeBeforeBoost;
        /* 0x0B00 */ public float MaxTimeAfterMeleeBeforeBoost;
        /* 0x0B04 */ public float MeleeBoostAirForce;
        /* 0x0B08 */ public float MeleeToAirBoostInitialImpulse;
        /* 0x0B0C */ public float MaxTimeInMeleeBoost;
        /* 0x0B10 */ public bool RocketBootsEnabled;
        /* 0x0B11 */ public bool RocketBootsUseCustomCamera;
        /* 0x0B14 */ public float RocketBootsActivationWindow;
        /* 0x0B18 */ public float RocketBootsDoubleTapTime;
        /* 0x0B1C */ public float RocketBootsImpulse;
        /* 0x0B20 */ public float RocketBootsBoostForce;
        /* 0x0B24 */ public float RocketBootsDriftForce;
        /* 0x0B28 */ public float RocketBootsForceStartTime;
        /* 0x0B2C */ public float RocketBootsForceDuration;
        /* 0x0B30 */ public float RocketBootsMinDesiredHeight;
        /* 0x0B34 */ public float RocketBootsMaxDesiredHeight;
        /* 0x0B38 */ public float RocketBootsHeightAdjustTime;
        /* 0x0B3C */ public float RocketBootsHeightAdjustUpStrength;
        /* 0x0B40 */ public float RocketBootsHeightAdjustDownStrength;
        /* 0x0B44 */ public float RocketBootsJetpackMinLevel;
        /* 0x0B48 */ public float RocketBootsBoostTankDrainSpeed;
        /* 0x0B4C */ public float RocketBootsDriftTankDrainSpeed;
        /* 0x0B50 */ public float RocketBootsBoostOnTime;
        /* 0x0B54 */ public float RocketBootsBoostOffTime;
        /* 0x0B58 */ public float RocketBootsZigZagStrength;
        /* 0x0B5C */ public float RocketBootsZigZagForceDuration;
        /* 0x0B60 */ public float RocketBootsMaxSpeed;
        /* 0x0B64 */ public float RocketBootsDriftEndTime;
        /* 0x0B68 */ public float RocketBootsWindUpBraking;
        /* 0x0B6C */ public float RocketBootsDriftBraking;
        /* 0x0B70 */ public float RocketBootsDriftDownwardForce;
        /* 0x0B74 */ public float JetpackForce;
        /* 0x0B78 */ public float JetpackBrake;
        /* 0x0B7C */ public float JetpackMinLevel;
        /* 0x0B80 */ public float JetpackMaxSpeed;
        /* 0x0B84 */ public float JetpackMaxUpSpeed;
        /* 0x0B88 */ public float JetpackUpForce;
        /* 0x0B8C */ public float JetpackIgnitionForce;
        /* 0x0B90 */ public float JetpackIgnitionTime;
        /* 0x0B94 */ public float JetpackMinIgnitionTime;
        [NMS(Size = 0x3)]
        /* 0x0B98 */ public float[] JetpackTankTimes;
        /* 0x0BA4 */ public float JetpackFillRate;
        /* 0x0BA8 */ public float JetpackFillRateHardMode;
        /* 0x0BAC */ public float Unknown0xBAC;
        /* 0x0BB0 */ public float JetpackFillRateSpaceStationMultiplier;
        /* 0x0BB4 */ public float Unknown0xBB4;
        /* 0x0BB8 */ public float Unknown0xBB8;
        /* 0x0BBC */ public float JetpackUpForceDeadPlanetExtra;
        /* 0x0BC0 */ public float JetpackForceDeadPlanetExtra;
        /* 0x0BC4 */ public float JetpackIgnitionForceDeadPlanetExtra;
        /* 0x0BC8 */ public float Unknown0xBC8;
        /* 0x0BCC */ public float Unknown0xBCC;
        /* 0x0BD0 */ public float Unknown0xBD0;
        /* 0x0BD4 */ public float Unknown0xBD4;
        /* 0x0BD8 */ public float Unknown0xBD8;
        /* 0x0BDC */ public float Unknown0xBDC;
        /* 0x0BE0 */ public float Unknown0xBE0;
        /* 0x0BE4 */ public bool EnableHeadMovements;
        /* 0x0BE5 */ public bool ClampPitch;
        /* 0x0BE8 */ public float DamageRepairFactor;
        /* 0x0BEC */ public float DamageRepairFactorHardMode;
        /* 0x0BF0 */ public float Unknown0xBF0;
        /* 0x0BF4 */ public float Unknown0xBF4;
        /* 0x0BF8 */ public float NormalModeHazardTimeMultiplier;
        /* 0x0BFC */ public float NormalModeHazardDamageRateMultiplier;
        /* 0x0C00 */ public float NormalModeHazardDamageWoundRateMultiplier;
        /* 0x0C04 */ public float NormalModeSubstanceRewardMultiplier;
        /* 0x0C08 */ public float NormalModeHazardRechargeUnderground;
        /* 0x0C0C */ public float HardModeHazardTimeMultiplier;
        /* 0x0C10 */ public float HardModeHazardDamageRateMultiplier;
        /* 0x0C14 */ public float HardModeHazardDamageWoundRateMultiplier;
        /* 0x0C18 */ public float HardModeSubstanceRewardMultiplier;
        /* 0x0C1C */ public float HardModeHazardRechargeUnderground;
        /* 0x0C20 */ public float FreighterProbeScanTime;
        /* 0x0C24 */ public int MaxNumDestroyEffects;
        /* 0x0C28 */ public int MinNumDestroyEffects;
        /* 0x0C2C */ public float ProjectileEndTime;
        /* 0x0C30 */ public float ExplosionTimePerEffect;
        /* 0x0C34 */ public float ExplosionTimeVariance;
        /* 0x0C38 */ public float ExplosionScaleVariance;
        /* 0x0C3C */ public float ExplosionBoundingInset;
        /* 0x0C40 */ public float ExplosionBoundingInsetRange;
        /* 0x0C44 */ public float DestroyEffectFinalDelay;
        /* 0x0C48 */ public float ShipPriceExp2;
        /* 0x0C4C */ public float WeaponPriceExp2;
        /* 0x0C50 */ public float FreighterPriceExp2;
        /* 0x0C54 */ public float ShipCoolFactor;
        /* 0x0C58 */ public float WeaponCoolFactor;
        /* 0x0C5C */ public float FreighterCoolFactor;
        /* 0x0C60 */ public bool MouseCrosshairVisible;
        /* 0x0C64 */ public float MouseMaxLength;
        /* 0x0C68 */ public float MouseDeadZone;
        /* 0x0C6C */ public float Unknown0xC6C;
        /* 0x0C70 */ public float Unknown0xC70;         // This and the above are more than likely related to the mouse...
        /* 0x0C74 */ public float MouseAimZone;
        /* 0x0C78 */ public float MouseCrosshairMaxAlpha;
        /* 0x0C7C */ public float MouseCrosshairAlphaFade;
        /* 0x0C80 */ public float MouseCrosshairAlphaFadeSpeed;
        /* 0x0C84 */ public float MouseCrosshairLineAlpha;
        /* 0x0C88 */ public float MouseCrosshairLineWidth;
        /* 0x0C8C */ public float MouseCrosshairShipStrength;
        /* 0x0C90 */ public float MouseCrosshairMultiplier;
        /* 0x0C94 */ public float Unknown0xC94;
        /* 0x0C98 */ public float Unknown0xC98;
        /* 0x0C9C */ public float Unknown0xC9C;
        /* 0x0CA0 */ public float Unknown0xCA0;
        /* 0x0CA4 */ public bool UseEnergy;
        /* 0x0CA5 */ public bool InventoryDamage;
        /* 0x0CA6 */ public bool NeverPreyedOn;
        /* 0x0CA7 */ public bool PermanantFire;
        /* 0x0CA8 */ public bool PermanantAltFire;
        /* 0x0CA9 */ public bool LuckyWithTech;
        /* 0x0CAC */ public int BulletCostReducer;
        /* 0x0CB0 */ public int BulletClipMultiplier;
        /* 0x0CB4 */ public float LootForceMultiplier;
        /* 0x0CB8 */ public float WoundTimeMinimum;
        /* 0x0CBC */ public float WoundDamageLimit;
        /* 0x0CC0 */ public float WoundDamageLimitShip;
        /* 0x0CC4 */ public float WoundDamageDecayTime;
        /* 0x0CC8 */ public float ResourceBlobFinalScaleDistance;
        /* 0x0CCC */ public float LaserPlayerOffset;
        /* 0x0CD0 */ public float WalkerAlertRange;
        /* 0x0CD4 */ public float WalkerSightRange;
        /* 0x0CD8 */ public float WalkerSightAngle;
        /* 0x0CDC */ public float CombatEscalateTime;
        /* 0x0CE0 */ public float CombatEscapeRadius;
        /* 0x0CE4 */ public float CombatEscapeTime;
        /* 0x0CE8 */ public bool UpgradeExosuitWithProduct;
        [NMS(Size = 0x7, Ignore = true)]
        /* 0x0CE9 */ public byte[] PaddingCE9;
        [NMS(Size = 0x10)]
        /* 0x0CF0 */ public string ExosuitUpgradeProduct;
        /* 0x0D00 */ public int SuitInventoryStartSeed;
        /* 0x0D04 */ public int MaxNumShipsAttackingPlayer;
        /* 0x0D08 */ public float ObjectScanTime;
        /* 0x0D0C */ public float DroneProbeScanTime;
        /* 0x0D10 */ public int PirateHailPercent;
        /* 0x0D14 */ public float PirateBountyInitTime;
        /* 0x0D18 */ public float PirateProbeInitTime;
        /* 0x0D1C */ public float PirateProbeAttackWaitTime;
        /* 0x0D20 */ public float PirateProbeAttackWarnTime;
        /* 0x0D24 */ public float PirateProbeScanTime;
        /* 0x0D28 */ public float PirateProbeScanTotalTime;
        /* 0x0D2C */ public float PirateProbeHailPause;
        /* 0x0D30 */ public float PirateBattleMarkerRange;
        /* 0x0D34 */ public float PirateBattleWarnTime;
        /* 0x0D38 */ public float PirateBattleMarkerTime;
        /* 0x0D3C */ public float PirateBattleMaxTime;
        [NMS(Size = 0x20)]
        /* 0x0D40 */ public string TraderHailReceiveOSDLoc;
        [NMS(Size = 0x20)]
        /* 0x0D60 */ public string TraderHailRefusedOSDLoc;
        /* 0x0D80 */ public float TraderHailTime;
        /* 0x0D84 */ public float TraderApproachTime;
        /* 0x0D88 */ public float TraderHailDistance;
        /* 0x0D8C */ public float TraderApproachDistance;
        /* 0x0D90 */ public float TraderSpamTimeWait;
        /* 0x0D94 */ public float TraderStayCloseLockOffset;
        /* 0x0D98 */ public float TraderStayCloseLockSin1Coeff;
        /* 0x0D9C */ public float TraderStayCloseLockSin1Offset;
        /* 0x0DA0 */ public float TraderStayCloseLockSin2Coeff;
        /* 0x0DA4 */ public float TraderStayCloseLockSin2Offset;
        /* 0x0DA8 */ public float TraderStayCloseLockSinsAdd;
        /* 0x0DAC */ public float TraderStayCloseLockSpread;
        /* 0x0DB0 */ public float TraderStayCloseLockSpreadAdd;
        /* 0x0DB4 */ public float TraderStayCloseLockSpreadTime;
        /* 0x0DB8 */ public float Unknown0xDB8;
        /* 0x0DBC */ public float Unknown0xDBC;
        /* 0x0DC0 */ public float Unknown0xDC0;
        /* 0x0DC4 */ public float Unknown0xDC4;
        /* 0x0DC8 */ public float Unknown0xDC8;
        /* 0x0DCC */ public float Unknown0xDCC;
        /* 0x0DD0 */ public float TraderHealthFightThreshold;
        /* 0x0DD4 */ public int TraderCommunicationBanMinTime;
        /* 0x0DD8 */ public int TraderCommunicationBanMaxTime;
        // I am assuming the following chunk has something to do with the space eggs...
        /* 0x0DDC */ public float Unknown0xDDC;
        /* 0x0DE0 */ public float Unknown0xDE0;
        /* 0x0DE4 */ public float Unknown0xDE4;
        /* 0x0DE8 */ public float Unknown0xDE8;
        /* 0x0DEC */ public float Unknown0xDEC;
        /* 0x0DF0 */ public float Unknown0xDF0;
        /* 0x0DF4 */ public float Unknown0xDF4;
        /* 0x0DF8 */ public float Unknown0xDF8;
        [NMS(Size = 0x4, Ignore = true)]
        /* 0x0DFC */ public byte[] PaddingEFC;
        [NMS(Size = 0x10)]
        /* 0x0E00 */ public string Unknown0xE00;
        /* 0x0E10 */ public float LaserMiningDamageMultiplier;
        /* 0x0E14 */ public float ShieldRechargeMinTimeSinceDamage;
        /* 0x0E18 */ public float ShieldRechargeRate;
        /* 0x0E1C */ public float MoveStickHighRangeLimit;
        /* 0x0E20 */ public float WitnessAIDamageDistance;
        /* 0x0E24 */ public float WitnessAIDamageAngle;
        /* 0x0E28 */ public float DeathDamageDrainChargeFactor;
        /* 0x0E2C */ public int DeathDamageTechBrokenPercent;
        /* 0x0E30 */ public float MaxProjectileRadiusMultiplier;
        /* 0x0E34 */ public float HardLandPainTime;
        /* 0x0E38 */ public int GunBaseClipSize;
        /* 0x0E3C */ public int GrenadeBaseClipSize;
        /* 0x0E40 */ public float MeleeCooldown;
        /* 0x0E44 */ public float ChargeMeleeCooldown;
        /* 0x0E48 */ public float MeleeDistance;
        /* 0x0E4C */ public float MeleeDistance3P;
        /* 0x0E50 */ public float MeleeRadius;
        /* 0x0E54 */ public float MeleeHitTimeDelay;
        /* 0x0E58 */ public float MeleeSpeedBoost;
        /* 0x0E5C */ public float MeleeSpeedDamageBoost;
        /* 0x0E60 */ public float MeleeSpeedBoostRangeMultiplier;
        /* 0x0E64 */ public float MeleeStaminaDrain;
        /* 0x0E68 */ public float Unknown0xE68;     // These aren't related to melee it seems
        /* 0x0E6C */ public float Unknown0xE6C;
        /* 0x0E70 */ public float Unknown0xE70;
        /* 0x0E74 */ public float Unknown0xE74;
        /* 0x0E78 */ public float Unknown0xE78;
        [NMS(Size = 0x4, Ignore = true)]
        /* 0x0E7C */ public byte[] PaddingE7C;
        /* 0x0E80 */ public GcScanEffectData Unknown0xE80;
        /* 0x0ED0 */ public float TemperatureDisplaySampleTime;
        /* 0x0EE0 */ public Colour StarFieldColour;
        /* 0x0EF0 */ public float StarFieldRadius;
        /* 0x0EF4 */ public float StarFieldDensity;
        /* 0x0EF8 */ public float StarFieldStarSize;
        /* 0x0EFC */ public float SpeedLinesSpeedMin;
        /* 0x0F00 */ public float SpeedLinesSpeedMax;
        /* 0x0F04 */ public float SpeedLinesLength;
        /* 0x0F08 */ public float SpeedLinesTotalLength;
        /* 0x0F0C */ public float SpeedLinesWidthMin;
        /* 0x0F10 */ public float SpeedLinesWidthMax;
        /* 0x0F14 */ public float SpeedLinesRadiusStartMin;
        /* 0x0F18 */ public float SpeedLinesRadiusStartMax;
        /* 0x0F1C */ public float SpeedLinesRadiusIncrement;
        /* 0x0F20 */ public float SpeedLinesStartFade;
        /* 0x0F24 */ public float SpeedLinesMinAlpha;
        /* 0x0F28 */ public float SpeedLinesMaxAlpha;
        /* 0x0F2C */ public float SpeedLinesOffset;
        /* 0x0F30 */ public float SleepFadeTime;
        /* 0x0F34 */ public float StaminaRate;
        /* 0x0F38 */ public float StaminaRecoveryRate;
        /* 0x0F3C */ public float StaminaRecoveredFactor;
        /* 0x0F40 */ public float ScanLabelTime;
        /* 0x0F44 */ public float ScanWobbleFreq;
        /* 0x0F48 */ public float ScanWobbleAmp;
        /* 0x0F4C */ public float ScanWobbleFreq2;
        /* 0x0F50 */ public float ScanWobbleAmp2;
        /* 0x0F54 */ public float ScanRotate;
        /* 0x0F58 */ public float ScanRotateDist;
        /* 0x0F5C */ public float ScanRotateWobbleAmp;
        /* 0x0F60 */ public float ScanFadeInTime;
        /* 0x0F64 */ public float ScanFadeOutTime;
        /* 0x0F68 */ public float ScanBeamWidth;
        /* 0x0F6C */ public float ScanRotateBeamWdith;
        /* 0x0F70 */ public float ScanBeamMainWidth;
        /* 0x0F74 */ public float WantedDroneEventRadius;
        /* 0x0F78 */ public float WantedMinSpaceTime;
        /* 0x0F7C */ public float WantedMinPlanetTime;
        /* 0x0F80 */ public float WantedLevelDelay;
        /* 0x0F84 */ public float WantedWitnessTimer;
        /* 0x0F88 */ public float WantedWitnessFuzzyTime;
        /* 0x0F8C */ public float WantedMinorCrimeAmount;
        /* 0x0F90 */ public float WantedTimeoutAggressive;
        [NMS(Size = 0x5)]
        /* 0x0F94 */ public float[] WantedTimeout;
        [NMS(Size = 0x5)]
        /* 0x0FA8 */ public float[] WantedEscalateTime;
        [NMS(Size = 0x5)]
        /* 0x0FBC */ public float[] WantedExtremeEscalateTime;
        /* 0x0FD0 */ public int ControlModes; // should be enum
        /* 0x0FD4 */ public float InteractionScanRange;
        /* 0x0FD8 */ public float InteractionButtonRange;
        /* 0x0FDC */ public float InteractionFocusTime;
        /* 0x0FE0 */ public float InteractionSubstanceRange;
        /* 0x0FE4 */ public float HeatShieldTime;
        /* 0x0FE8 */ public float LaserShakeMin;
        /* 0x0FEC */ public float LaserShakeMax;
        /* 0x0FF0 */ public float GunRecoil;
        /* 0x0FF4 */ public float LaserRecoil;
        /* 0x0FF8 */ public float BeamRecoil;
        /* 0x0FFC */ public float GrenadeRecoil;
        /* 0x01000 */ public float GunRecoilSpring;
        /* 0x01004 */ public float BlastRecoilSpring;
        /* 0x01008 */ public float RailRecoilSpring;
        /* 0x0100C */ public float PulseRecoilSpring;
        /* 0x01010 */ public float GunRecoilSettleSpring;
        /* 0x01014 */ public float ThirdPersonRecoilMultiplier;
        /* 0x01018 */ public float GunRecoilMin;
        /* 0x0101C */ public float GunRecoilMax;
        /* 0x01020 */ public float ProjectileDamageFalloff;
        /* 0x01024 */ public float ShotgunDispersion;
        /* 0x01028 */ public GcResourceCollectEffect TerrainResourceCollect;
        /* 0x0105C */ public GcResourceCollectEffect TerrainResourceMiniCollect;
        /* 0x01090 */ public GcResourceCollectEffect TerrainResourceMeleeCollect;
        /* 0x010C4 */ public GcResourceCollectEffect CrystalResourceCollect;
        /* 0x010F8 */ public GcResourceCollectEffect ShardResourceCollect;
        /* 0x0112C */ public GcBoidData MissileSwarm;
        /* 0x01158 */ public GcPlayerStickData StickData;
        /* 0x01174 */ public bool AutoAim;
        [NMS(Size = 0x3, Ignore = true)]
        /* 0x01175 */ public byte[] Padding1175;
        /* 0x01178 */ public float AutoAimMaxAccelFactor;
        /* 0x0117C */ public float AutoAimFixedInterceptSpeed;
        /* 0x01180 */ public float AutoAimTimeOut;
        /* 0x01184 */ public float AutoAimMaxAngle;
        /* 0x01188 */ public float AutoAimMinScreenDistance;
        /* 0x0118C */ public float AutoAimRadiusExtra;
        /* 0x01190 */ public float AutoAimStickyMin;
        /* 0x01194 */ public float AutoAimStickyMax;
        /* 0x01198 */ public TkCurveType AutoAimDotCurve;
        /* 0x0119C */ public TkCurveType AutoAimCentreOffsetCurve;
        /* 0x011A0 */ public float AimDistanceShip;
        /* 0x011A4 */ public float AimSpeed;
        /* 0x011A8 */ public float AimWeightAdd;
        /* 0x011AC */ public float AimMinWeight;
        /* 0x011B0 */ public float AimDecay;
        /* 0x011B4 */ public float AimOffset;
        /* 0x011B8 */ public float AimShootableTargetAngle;
        /* 0x011BC */ public float AimDisperseTime;
        /* 0x011C0 */ public float AimDisperseMinTime;
        /* 0x011C4 */ public float AimDisperseCooldownTime;
        /* 0x011C8 */ public float AimDisperseCooldownFactor;
        /* 0x011CC */ public TkCurveType AimDisperseCurve;
        /* 0x011D0 */ public float CrosshairTime;
        /* 0x011D4 */ public float BeaconActivateRange;
        /* 0x011D8 */ public int UnknownInt0x11D8;                  // Possibly related to ExperienceMaxCivilianShipSpawns?
        /* 0x011DC */ public int UnknownInt0x11DC;                  // this too...
        /* 0x011E0 */ public float ExperiencePirateFreighterAttackRange;
        /* 0x011E4 */ public float ExperienceWalkerSize;
        /* 0x011E8 */ public float ExperienceInterestingShipDistance;
        /* 0x011EC */ public float ExperienceInterestingFreighterDistance;
        /* 0x011F0 */ public float ExperienceInterestingDroneDistance;
        /* 0x011F4 */ public float ExperienceShipTimeMin;
        /* 0x011F8 */ public float ExperienceShipTimeMax;
        /* 0x011FC */ public int ExperiencePirateCloseAttackPercentage;
        /* 0x01200 */ public float ExperiencePirateTimeMin;
        /* 0x01204 */ public float ExperiencePirateTimeMax;
        /* 0x01208 */ public float ExperienceDroneTimeMin;
        /* 0x0120C */ public float ExperienceDroneTimeMax;
        /* 0x01210 */ public float ExperienceFlybyScareRadius;
        /* 0x01214 */ public float ExperienceFlybyScareTime;
        /* 0x01218 */ public Vector2f ExperienceFlybyStartAngle;
        /* 0x01220 */ public float ExperienceAlertRange;
        /* 0x01224 */ public float ExperienceAlertSightRange;
        /* 0x01228 */ public float ExperienceAlertSightAngle;
        /* 0x0122C */ public float ExperienceDroneSpawnOffset;
        /* 0x01230 */ public float ExperienceDroneSpawnAngle;
        /* 0x01234 */ public float ExperienceMessageBroadcastNearbyDistance;
        /* 0x01238 */ public float WantedEnemyAttackAmount;
        [NMS(Size = 0x80)]
        /* 0x0123C */ public string Gun;
        /* 0x012BC */ public float StickDeadZoneMin;
        /* 0x012C0 */ public float StickDeadZoneMax;
        /* 0x012C4 */ public TkCurveType StickCurve;
        /* 0x012C8 */ public float AutoLandRange;
        /* 0x012CC */ public float AutoLandTime;
        /* 0x012D0 */ public float LabelSpringTime;
        /* 0x012D4 */ public float LabelOffset;
        /* 0x012D8 */ public float AtmosphereEffectTime;
        /* 0x012DC */ public float AtmosphereEffectOffset;
        [NMS(Size = 0x7)]
        /* 0x012E0 */ public GcCreatureAlertData[] AlertTable;
        /* 0x01388 */ public float PainFlickerAmount;
        /* 0x0138C */ public float PainColourSeperateAmount;
        /* 0x01390 */ public float PainTime;
        /* 0x01394 */ public GcProjectileLineData PlayerBullet;
        /* 0x013BC */ public GcProjectileLineData RobotBullet;
        /* 0x013E4 */ public GcProjectileLineData ShipBullet;
        /* 0x0140C */ public float ExplodeShakeMaxDist;
        /* 0x01410 */ public float ExplodeShakeMaxDistSpace;
        /* 0x01414 */ public float ExplodeShakeStrength;
        /* 0x01418 */ public float FlashSize;
        /* 0x0141C */ public float FlashPosX;
        /* 0x01420 */ public float FlashPosY;
        /* 0x01424 */ public float FlashPosZ;
        /* 0x01428 */ public float FlashSpeed;
        /* 0x0142C */ public float FlashPulse;
        /* 0x01430 */ public float FlashGrow;
        /* 0x01434 */ public float GunRightOffset;
        /* 0x01438 */ public float GunUpOffset;
        /* 0x0143C */ public float LaserBeamMineRate;
        /* 0x01440 */ public float LaserBeamCore;
        /* 0x01444 */ public float LaserBeamFlickerAmp;
        /* 0x01448 */ public float LaserBeamFlickerFreq;
        /* 0x0144C */ public float LaserEndOffset;
        /* 0x01450 */ public float GrenadeTerrainDeformRadius;
        /* 0x01454 */ public float LaserBeamTerrainDeformRadius;
        /* 0x01458 */ public float LaserBeamTerrainDeformVariance;
        /* 0x0145C */ public float LaserBeamOverheatTime;                   // Verify these? They look like they should be shifted but I know the laser overheat time was modified...
        /* 0x01460 */ public float LaserBeamAmmoUseTime;
        /* 0x01464 */ public float ReloadButtonHoldTimeToHolster;
        /* 0x01468 */ public float WeaponChangeModeTime;
        [NMS(Size = 0x4, Ignore = true)]
        /* 0x0146C */ public byte[] Padding146C;
        /* 0x01470 */ public Vector4f WeaponBarrelOffset;
        /* 0x01480 */ public Vector4f WeaponOffset;
        /* 0x01490 */ public float WeaponLowerDelay;
        /* 0x01494 */ public float WeaponHolsterDelay;
        /* 0x01498 */ public float WeaponLag;
        /* 0x0149C */ public float WeaponBobFactorWalkDeadZone;
        /* 0x014A0 */ public float WeaponBobFactorWalk;
        /* 0x014A4 */ public float WeaponBobFactorRun;
        /* 0x014A8 */ public float WeaponBobBlendTime;
        /* 0x014AC */ public TkCurveType WeaponBobBlendCurve;
        /* 0x014B0 */ public float WeaponGrenadeTime;
        /* 0x014B4 */ public float WeaponGunTime;
        /* 0x014B8 */ public float WeaponRailFireTime;
        /* 0x014BC */ public float WeaponRailRechargeTime;
        /* 0x014C0 */ public int MaxBuildHeight;
        /* 0x014C4 */ public float SpaceMaxGravityDist;
        /* 0x014C8 */ public float SpaceMinGravityDist;
        /* 0x014CC */ public float BulletBend;
        /* 0x014D0 */ public float ShootSizeMinZ;
        /* 0x014D4 */ public float ShootSizeMaxZ;
        /* 0x014D8 */ public float ShootSizeMinXY;
        /* 0x014DC */ public float ShootSizeMaxXY;
        /* 0x014E0 */ public float ShootSizeTime;
        /* 0x014E4 */ public float ShootSizeBase;
        /* 0x014E8 */ public float ShootOffset;
        /* 0x014EC */ public float ShootPrepTime;
        /* 0x014F0 */ public float GrenadeCarveRadius;
        /* 0x014F4 */ public float ChargeTime;
        /* 0x014F8 */ public float EnergyBallSpeed;
        /* 0x014FC */ public float ChargedEnergyBallSpeed;
        /* 0x01500 */ public float LookRayRadius;
        /* 0x01504 */ public float PickRange;
        /* 0x01508 */ public float DamageRateWhenUnderNoGravity;
        /* 0x0150C */ public float TakeDamageImpulse;
        /* 0x01510 */ public float HardLandTime;
        /* 0x01514 */ public float HardLandMin;
        /* 0x01518 */ public float HardLandMax;
        /* 0x0151C */ public float MeleeRange;
        /* 0x01520 */ public float MeleeTime;
        /* 0x01524 */ public float MeleeForcePush;
        /* 0x01528 */ public float MeleeOffset;
        /* 0x0152C */ public float PushForceAirFactor;
        /* 0x01530 */ public int HUDHeightPosX;
        /* 0x01534 */ public int HUDHeightPosY;
        /* 0x01538 */ public float TargetDistance;
        /* 0x0153C */ public float TargetRadius;
        /* 0x01540 */ public float HoldForce;
        /* 0x01544 */ public float HoldTime;
        /* 0x01548 */ public float HoldActionDistX;
        /* 0x0154C */ public float HoldActionDistY;
        /* 0x01550 */ public float HoldActionDistZ;
        /* 0x01554 */ public float HoldDistX;
        /* 0x01558 */ public float HoldDistY;
        /* 0x0155C */ public float HoldDistZ;
        /* 0x01560 */ public float HoldMaxForce;
        /* 0x01564 */ public float HoldRotate;
        /* 0x01568 */ public float BalanceStrength;
        /* 0x0156C */ public float BalanceSpeed;
        /* 0x01570 */ public float ExertionSmoothTime;
        /* 0x01574 */ public float ExertionFromPainTime;
        /* 0x01578 */ public float AnimWalkSpeed;
        /* 0x0157C */ public float AnimRunSpeed;
        /* 0x01580 */ public float AnimWalkToRunSpeed;
        /* 0x01584 */ public float AnimWalkBlendPoint;
        /* 0x01588 */ public float AnimRunBlendPoint;
        /* 0x0158C */ public float MaxSlopeAngle;
        /* 0x01590 */ public float SlopeSlidingSpeed;
        /* 0x01594 */ public float SlopeSlideBrake;
        /* 0x01598 */ public float MinSlideTime;
        /* 0x0159C */ public float MaxWalkableSlopeAngle;
        /* 0x015A0 */ public float MinSpidermanSlopeAngle;
        /* 0x015A4 */ public float MinTimeToHoldSpidermanPose;
        /* 0x015A8 */ public float MaxSpidermanSlopeAngle;
        /* 0x015AC */ public float MaxClingableSlopeAngle;
        /* 0x015B0 */ public float MinimumPushOffForceToSlide;
        /* 0x015B4 */ public float FullClipReloadSpeedMultiplier;
        /* 0x015B8 */ public float ReloadTapButtonSpeedIncrease;
        /* 0x015BC */ public float ClingBrakeMultiplier;
        /* 0x015C0 */ public float ClingAngleThreshold;
        /* 0x015C4 */ public float ClingSpeedThreshold;
        /* 0x015C8 */ public float ClimbableStickinessAngle;
        /* 0x015CC */ public float MinUpAmount;
        /* 0x015D0 */ public float FootOffset;
        /* 0x015D4 */ public float MaxFallSpeed;
        /* 0x015D8 */ public float PushForceDecay;
        /* 0x015DC */ public float LeanFwdMaxAngle;
        /* 0x015E0 */ public float LeanBackMaxAngle;
        /* 0x015E4 */ public float LeanLeftMaxAngle;
        /* 0x015E8 */ public float LeanRightMaxAngle;
        /* 0x015EC */ public float LeanAmount;
        /* 0x015F0 */ public float LeanAmountFwd;
        /* 0x015F4 */ public float HelmetLag;
        /* 0x015F8 */ public float HelmetMaxLag;
        /* 0x015FC */ public float HelmetBob;
        /* 0x01600 */ public float JetpackHelmetBob;
        /* 0x01604 */ public float ShipCameraLag;
        /* 0x01608 */ public float MaxResource;
        /* 0x0160C */ public float ShieldRestoreSpeed;
        /* 0x01610 */ public float ShieldRestoreDelay;
        /* 0x01614 */ public float TimeHoldDownAccelerateToLaunchFromOutpost;
        /* 0x01618 */ public float DeathScreenFadeInThirdPerson;
        /* 0x0161C */ public float DeathScreenFadeInUnderwaterThirdPerson;
        /* 0x01620 */ public float DeathScreenFadeInTime;
        /* 0x01624 */ public float DeathScreenShipFadeInTime;
        /* 0x01628 */ public float DeathScreenPauseTime;
        /* 0x0162C */ public float DeathScreenMaxRegenWaitTime;
        /* 0x01630 */ public float DeathScreenMinRegenWaitTime;
        /* 0x01634 */ public float DeathScreenFadeOutTime;
        /* 0x01638 */ public GcPlayerStickData LookStickData;
        /* 0x01654 */ public GcPlayerStickData AmbientModeLookStickData;
        /* 0x01670 */ public int LowHealthEffectPips;
        /* 0x01674 */ public int LowHealthEffectShield;
        /* 0x01678 */ public float CriticalHitTime;
        /* 0x0167C */ public float CriticalHitDesatTime;
        /* 0x01680 */ public float CriticalHitDesatFreq;
        [NMS(Size = 0x2)]
        /* 0x01684 */ public GcCameraSpawnSetupData[] FirstSpawnDataTable;
        /* 0x016A4 */ public GcInventoryValueData ShipValueData;
        /* 0x016C0 */ public GcInventoryValueData WeaponValueData;
        /* 0x016DC */ public GcInventoryValueData FreighterValueData;
        [NMS(Size = 0x7)]
        /* 0x016F8 */ public float[] TechRarityData;
        [NMS(Size = 0x6)]
        /* 0x01714 */ public float[] TechLearningProbabilities;
        /* 0x0172C */ public int NumTechShopSlots;
        /* 0x01730 */ public float GrassPushDistance;
        [NMS(Size = 0xC, Ignore = true)]
        /* 0x01734 */ public byte[] Padding1734;
        /* 0x01740 */ public GcCameraAnomalySetupData AnomalyBlachHoleSpawnData;
        /* 0x01780 */ public GcCameraAnomalySetupData AnomalyAtlasStationSpawnData;
        /* 0x017C0 */ public GcCameraAnomalySetupData AnomalyMiniStationSpawnData;
        /* 0x1800 */ public GcJourneyMedalTiers MedalTiers;
        /* 0x1810 */ public int LowGuildRank;
        /* 0x1814 */ public int MedGuildRank;
        /* 0x1818 */ public int HighGuildRank;
        /* 0x181C */ public int BestGuildRank;
        /* 0x1820 */ public float LaserWeaponRange;
        /* 0x1824 */ public float LaserShipRange;
        /* 0x1828 */ public float TerrainLaserRange;
        /* 0x182C */ public float VehicleLaserRange;
        /* 0x1830 */ public GcPlayerCommunicatorMessage PirateHailMessage;
        /* 0x1880 */ public GcShipDialogue TraderHailMessages;
        [NMS(Size = 0x4)]
        /* 0x1AE8 */ public GcShipDialogueTreeEnum[] TraderHailReceiveRegular;
        [NMS(Size = 0x2)]
        /* 0x1AF8 */ public GcShipDialogueTreeEnum[] TraderHailReceiveFight;
        [NMS(Size = 0x4)]
        /* 0x1B00 */ public GcShipDialogueTreeEnum[] TraderHailSend;
    }
}
